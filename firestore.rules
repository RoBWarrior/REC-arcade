rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Helper function to check if user is active
    function isActiveUser() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isActive == true;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection rules
    match /users/{userId} {
      // Users can read their own profile, admins can read all
      allow read: if isOwner(userId) || isAdmin();
      
      // Users can create their own profile during registration
      allow create: if isAuthenticated() && 
                       request.auth.uid == userId &&
                       request.resource.data.uid == userId &&
                       request.resource.data.email == request.auth.token.email;
      
      // Users can update their own profile (excluding admin fields)
      allow update: if isOwner(userId) && 
                       !('isAdmin' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       !('isActive' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       request.resource.data.uid == resource.data.uid;
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }
    
    // Game scores collection rules
    match /gameScores/{scoreId} {
      // Anyone can read scores (for leaderboards)
      allow read: if true;
      
      // Only active authenticated users can create scores
      allow create: if isActiveUser() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.score is number &&
                       request.resource.data.gameType is string;
      
      // Users can update their own scores (limited fields)
      allow update: if isOwner(resource.data.userId) && 
                       !('score' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       !('userId' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       !('gameType' in request.resource.data.diff(resource.data).affectedKeys());
      
      // Users can delete their own scores, admins can delete any
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // Game sessions collection rules
    match /gameSessions/{sessionId} {
      // Users can read their own sessions, admins can read all
      allow read: if isOwner(resource.data.userId) || isAdmin();
      
      // Only active users can create game sessions
      allow create: if isActiveUser() && 
                       request.resource.data.userId == request.auth.uid;
      
      // Users can update their own sessions
      allow update: if isOwner(resource.data.userId);
      
      // Users can delete their own sessions, admins can delete any
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // Events collection rules
    match /events/{eventId} {
      // Anyone can read events
      allow read: if true;
      
      // Only admins can create events
      allow create: if isAdmin() && 
                       request.resource.data.createdBy == request.auth.uid;
      
      // Only admins can update events
      allow update: if isAdmin();
      
      // Only admins can delete events
      allow delete: if isAdmin();
    }
    
    // Event participations collection rules
    match /eventParticipations/{participationId} {
      // Users can read their own participations, admins can read all
      allow read: if isOwner(resource.data.userId) || isAdmin();
      
      // Users can create their own participation
      allow create: if isActiveUser() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.status == 'registered';
      
      // Users can update their own participation (limited fields)
      allow update: if isOwner(resource.data.userId) && 
                       !('userId' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       !('eventId' in request.resource.data.diff(resource.data).affectedKeys());
      
      // Users can delete their own participation, admins can delete any
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // Leaderboards collection rules
    match /leaderboards/{leaderboardId} {
      // Anyone can read leaderboards
      allow read: if true;
      
      // Only system (server-side) or admins can write leaderboards
      allow write: if isAdmin();
    }
    
    // Achievements collection rules
    match /achievements/{achievementId} {
      // Anyone can read achievements
      allow read: if true;
      
      // Only admins can manage achievements
      allow write: if isAdmin();
    }
    
    // User achievements collection rules
    match /userAchievements/{userAchievementId} {
      // Users can read their own achievements, admins can read all
      allow read: if isOwner(resource.data.userId) || isAdmin();
      
      // Only system (server-side) or admins can award achievements
      allow write: if isAdmin();
    }
    
    // Notifications collection rules
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isOwner(resource.data.userId);
      
      // Users can update their own notifications (mark as read)
      allow update: if isOwner(resource.data.userId) && 
                       !('userId' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       !('title' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       !('message' in request.resource.data.diff(resource.data).affectedKeys());
      
      // Only system or admins can create notifications
      allow create: if isAdmin();
      
      // Users can delete their own notifications, admins can delete any
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // System settings collection rules
    match /systemSettings/{settingId} {
      // Anyone can read system settings
      allow read: if true;
      
      // Only admins can modify system settings
      allow write: if isAdmin();
    }
    
    // Admin logs collection rules
    match /adminLogs/{logId} {
      // Only admins can read admin logs
      allow read: if isAdmin();
      
      // Only admins can create admin logs
      allow create: if isAdmin() && 
                       request.resource.data.adminId == request.auth.uid;
      
      // Admin logs cannot be updated or deleted
      allow update, delete: if false;
    }
    
    // Legacy collections (for backward compatibility)
    match /scores/{scoreId} {
      allow read: if true;
      allow create: if isActiveUser();
      allow update, delete: if false;
    }
    
    match /offlineScores/{scoreId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    // Catch-all rule for any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// Storage rules
service firebase.storage {
  match /b/{bucket}/o {
    
    // Profile pictures
    match /profile-pictures/{userId} {
      // Users can read their own profile picture, anyone can read for leaderboards
      allow read: if true;
      
      // Users can upload/update their own profile picture
      allow write: if request.auth != null && 
                      request.auth.uid == userId &&
                      request.resource.size < 5 * 1024 * 1024 && // 5MB limit
                      request.resource.contentType.matches('image/.*');
    }
    
    // Event banners
    match /event-banners/{fileName} {
      // Anyone can read event banners
      allow read: if true;
      
      // Only admins can upload event banners
      allow write: if request.auth != null && 
                      exists(/databases/(default)/documents/users/$(request.auth.uid)) &&
                      get(/databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin == true &&
                      request.resource.size < 10 * 1024 * 1024 && // 10MB limit
                      request.resource.contentType.matches('image/.*');
    }
    
    // Game replay files (if needed in future)
    match /game-replays/{userId}/{fileName} {
      // Users can read their own replays, admins can read all
      allow read: if request.auth != null && 
                     (request.auth.uid == userId || 
                      (exists(/databases/(default)/documents/users/$(request.auth.uid)) &&
                       get(/databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin == true));
      
      // Users can upload their own replay files
      allow write: if request.auth != null && 
                      request.auth.uid == userId &&
                      request.resource.size < 50 * 1024 * 1024; // 50MB limit
    }
    
    // Deny access to any other files
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}